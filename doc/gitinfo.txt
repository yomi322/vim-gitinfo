*gitinfo.txt*	Show git information.

Version: 0.0.2
Author: yomi <yomi322@gmail.com>
License: MIT License

==============================================================================
CONTENTS					*gitinfo-contents*

INTRODUCTION			|gitinfo-introduction|
FUNCTIONS			|gitinfo-functions|
VARIABLES			|gitinfo-variables|
ISSUES				|gitinfo-issues|
CHANGELOG			|gitinfo-changelog|



==============================================================================
INTRODUCTION					*gitinfo-introduction*

*gitinfo* is a Vim plugin to show git information on |statusline| or
|tabline| as vcs_info does in zsh. Functions to get the information are
provided.

Add %{gitinfo#format()} to the statusline or the tabline like this.
>
    set statusline=%<%f\ %h%m%r%{gitinfo#format()}%=%-14.(%l,%c%V%)\ %P
<
See |gitinfo-functions| to customize the output format.


Requirements:
- git (http://git-scm.com/)

Latest Version:
https://github.com/yomi322/vim-gitinfo



==============================================================================
FUNCTIONS					*gitinfo-functions*

						*gitinfo#format()*
gitinfo#format([{fmt1}, {fmt2}])
	The result is the output of git information according to the given
	format. {fmt1} is used when there is no action (which is more often),
	and {fmt2} when an action is going on; like an interacting rebase or
	a merge conflict. When the arguments are omitted, |g:gitinfo_format|
	and |g:gitinfo_action_format| are respectively used as {fmt1} and
	{fmt2}. If the current directory is not controlled by git, an empty
	string is returned.

						*gitinfo#branch()*
gitinfo#branch()
	The result is the name of the current branch. If the current HEAD is
	detached or the current working directory is not git-controlled, an
	empty string is returned.

						*gitinfo#action()*
gitinfo#action()
	The result is a string corresponding to the action (e.g. merge,
	rebase) in case there is an action like an interactive rebase or a
	merge conflict. It returns an empty string in the other cases.

						*gitinfo#revision()*
gitinfo#revision([{len}])
	The result is a string describing the hash value of the currently
	checked out commit. It is truncated to the number of characters
	specified by {len}. When {len} is ommited,
	|g:gitinfo_revisio_nlength| is used. If the current working
	directory is not controlled by git, an empty string is returned.

						*gitinfo#staged()*
gitinfo#staged([{str}])
	The result is a string of {str} if there are staged changes.
	Otherwise an empty string is returned. When {str} is omitted,
	|g:gitinfo_staged_string| is used.

						*gitinfo#unstaged()*
gitinfo#unstaged([{str}])
	The result is a string of {str} if there are unstaged changes.
	Otherwise an empty string is returned. Changes in untracked files
	are ignored. When {str} is omitted, |g:gitinfo_unstaged_string| is
	used.

						*gitinfo#untracked()*
gitinfo#untracked([{str}])
	The result is a string of {str} if there are untracked files.
	Otherwise an empty string is returned. When {str} is omitted,
	|g:gitinfo_untracked_string| is used.

						*gitinfo#ahead()*
gitinfo#ahead([{fmt}])
	The result is a formatted string according to {fmt} which shows the
	local branch is ahead-of remote HEAD. If there are not an
	appropriate remote branch or commits, an empty string is returned.
	When {fmt} is omitted, |g:gitinfo_ahead_format| is used.

						*gitinfo#behind()*
gitinfo#behind([{fmt}])
	The result is a formatted string according to {fmt} which shows the
	local branch is behind remote HEAD. If there are not an
	appropriate remote branch or commits, an empty string is returned.
	When {fmt} is omitted, |g:gitinfo_behind_format| is used.

						*gitinfo#unmerged()*
gitinfo#unmerged([{fmt}])
	The result is a formatted string according to {fmt} which shows the
	current branch is ahead-of master branch. If there are not
	appropriate commits, an empty string is returned. When {fmt} is
	omitted, |g:gitinfo_unmerged_format| is used.



==============================================================================
VARIABLES					*gitinfo-variables*

						*g:gitinfo_format*
						*g:gitinfo_action_format*
g:gitinfo_format			String (default: '[%b]-(%i)')
g:gitinfo_action_format			String (default: '[%b|%a]-(%i)')
	The format string used in |gitinfo#format()|. The following
	replacements are done in the format string. See the section of each
	of the functions for more details.

	%b	gitinfo#branch()
	%a	gitinfo#action()
	%i	gitinfo#revision()
	%c	gitinfo#staged()
	%u	gitinfo#unstaged()
	%t	gitinfo#untracked()
	%r	gitinfo#ahead()
	%l	gitinfo#behind()

						*g:gitinfo_revision_length*
g:gitinfo_revision_length		Number (default: 7)
	The number which specifies the number of the characters of the hash
	value to be shown.

						*g:gitinfo_staged_string*
g:gitinfo_staged_string			String (default: 'S')
	The string shown if there are staged changes.

						*g:gitinfo_unstaged_string*
g:gitinfo_unstaged_string		String (default: 'U')
	The string shown if there are unstaged changes.

						*g:gitinfo_untracked_string*
g:gitinfo_untracked_string		String (default: '?')
	The string shown if there are untracked files.

						*g:gitinfo_ahead_format*
						*g:gitinfo_behind_format*
g:gitinfo_ahead_format			String (default: '+%N')
g:gitinfo_behind_format			String (default: '-%N')
	The format strings used in |gitinfo#ahead()| and |gitinfo#behind()|,
	respectively. '%N' in the format is replaced to the number of the
	appropriate commits.

						*g:gitinfo_unmerged_format*
g:gitinfo_unmerged_format		String (default: 'm%N')
	The format string used in |gitinfo#unmerged()|. '%N' in the format
	is replaced to the number of the appropriate commits.



==============================================================================
ISSUES						*gitinfo-issues*

- Currently, there is no known issue.



==============================================================================
CHANGELOG					*gitinfo-changelog*

x.x.x	xxxx-xx-xx
	  - Add global variables to set default
	  - Add gitinfo#untracked() and gitinfo#upstream()

0.0.2	2012-09-17
	  - Change the behavior of gitinfo#unstaged() and gitinfo#staged()
	  - Modify gitinfo#revision() to accept the argument
	  - Add gitinfo#format()

0.0.1	2012-09-13
	  - Initial version.



==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
