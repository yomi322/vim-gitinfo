*gitinfo.txt*	Show git information.

Version: 0.0.1
Author: yomi <yomi322@gmail.com>
License: MIT License

==============================================================================
CONTENTS					*gitinfo-contents*

INTRODUCTION			|gitinfo-introduction|
FUNCTIONS			|gitinfo-functions|
ISSUES				|gitinfo-issues|
CHANGELOG			|gitinfo-changelog|



==============================================================================
INTRODUCTION					*gitinfo-introduction*

*gitinfo* is a Vim plugin to show git information on |statusline| or
|tabline| as vcs_info does in zsh. Functions to get the information are
provided.

Add %{gitinfo#format()} to the statusline or the tabline like this.
>
    set statusline=%<%f\ %h%m%r%{gitinfo#format()}%=%-14.(%l,%c%V%)\ %P
<
See |gitinfo-functions| to customize the output format.


Requirements:
- git (http://git-scm.com/)

Latest Version:
https://github.com/yomi322/vim-gitinfo



==============================================================================
FUNCTIONS					*gitinfo-functions*

USAGE				RESULT	DESCRIPTION

gitinfo#format([{fmt1}, {fmt2}])
				String	show git info according to the format
gitinfo#branch()		String	the branch name
gitinfo#action()		String	the action name
gitinfo#revision([{len}])	String	the hash of the current commit
gitinfo#unstaged([{str}])	String	check if there are unstaged changes
gitinfo#staged([{str}])		String	check if there are staged changes


						*gitinfo#format()*
gitinfo#format([{fmt1}, {fmt2}])
	The result is the output of git information according to the given
	format. {fmt1} is used when there is no action (which is more often),
	and {fmt2} when an action is going on; like an interacting rebase or
	a merge conflict. When the arguments are omitted, the default values
	are used instead.

	If the current directory is not controlled by git, an empty string is
	returned.

	The following replacements are done in the format string. See the
	section of each of the functions for more details.

	%b	gitinfo#branch()
	%a	gitinfo#action()
	%i	gitinfo#revision(7)
	%u	gitinfo#unstaged()
	%c	gitinfo#staged()

	The default values are shown below.

	fmt1	'[%b]-(%i)'
	fmt2	'[%b|%a]-(%i)'

						*gitinfo#branch()*
gitinfo#branch()
	The result is the name of the current branch. If the current HEAD is
	detached or the current working directory is not git-controlled, an
	empty string is returned.

						*gitinfo#action()*
gitinfo#action()
	The result is a string corresponding to the action (e.g. merge,
	rebase) in case there is an action like an interactive rebase or a
	merge conflict. It returns an empty string in the other cases.

						*gitinfo#revision()*
gitinfo#revision([{len}])
	The result is a string describing the hash value of the currently
	checked out commit. If the current working directory is not
	git-controlled, an empty string is returned.

	When {len}, which is a Number, is given, the return value is
	truncated to the given number of characters.

						*gitinfo#unstaged()*
gitinfo#unstaged([{str}])
	The result is a string of {str}, if there are unstaged changes.
	Otherwise an empty string is returned. Changes in untracked files
	are ignored.

	When {str} is omitted, the default value 'U' is used instead.

						*gitinfo#staged()*
gitinfo#staged([{str}])
	The result is a string of {str}, if there are staged changes.
	Otherwise an empty string is returned.

	When {str} is omitted, the default value 'S' is used instead.



==============================================================================
ISSUES						*gitinfo-issues*

- Currently, there is no known issue.



==============================================================================
CHANGELOG					*gitinfo-changelog*

x.x.x	xxxx-xx-xx
	  - Change the behavior of gitinfo#unstaged() and gitinfo#staged()
	  - Modify gitinfo#revision() to accept the argument
	  - Add gitinfo#format()

0.0.1	2012-09-13
	  - Initial version.



==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
